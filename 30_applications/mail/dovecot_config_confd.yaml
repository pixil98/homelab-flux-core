apiVersion: v1
kind: Secret
metadata:
  name: dovecot-config-confd
  namespace: mail
type: Opaque
stringData:
  05-ssl.conf: |
    ssl = required
    ssl_server_cert_file = /var/certificate/tls.crt
    ssl_server_key_file = /var/certificate/tls.key
    #TODO this doesn't support self signed certs
    ssl_client_ca_file = /etc/ssl/certs/ca-certificates.crt
  10-auth.conf: |
    auth_username_format = 	%{user|lower}
    auth_allow_cleartext = no
    auth_mechanisms = oauthbearer xoauth2 plain login cram-md5

    oauth2 {
      tokeninfo_url = https://auth.${vals_info_cluster_domain}/application/o/userinfo/?access_token=
      introspection_url = https://${secrets_apps_auth_applications_dovecot_clientId}:${secrets_apps_auth_applications_dovecot_clientSecret}@auth.${vals_info_cluster_domain}/application/o/introspect/
      introspection_mode = post
      force_introspection = yes
      active_attribute = active
      active_value = true
      username_attribute = email
    }
    passdb oauth2 {
      driver = oauth2
      auth_mechanisms = oauthbearer xoauth2
      use_worker = yes
    }

    userdb static {
      driver = static
      fields {
        uid = vmail
        gid = vmail
        home = /var/vmail/%{user|domain}/%{user|username}
      }
    }

    ldap_uris = ldap://authentik-outpost-ldap.auth.svc.cluster.local
    #tls = no  #TODO use tls
    ldap_auth_dn = cn=${secrets_apps_auth_authentik_outpost_ldap_username},ou=users,dc=ldap,dc=goauthentik,dc=io
    ldap_auth_dn_password = ${secrets_apps_auth_authentik_outpost_ldap_password}
    ldap_base = dc=ldap,dc=goauthentik,dc=io

    passdb ldap {
      driver = ldap
      auth_mechanisms = plain login cram-md5
      use_worker = yes

      bind = yes
      bind_userdn = cn=%{user},ou=users,dc=ldap,dc=goauthentik,dc=io
      ldap_connection_group = passdb
      filter = (&(objectClass=user)(mail=%{user})(memberOf=cn=dovecot,ou=groups,dc=ldap,dc=goauthentik,dc=io)(ak-active=true))
      fields {
        user = %{ldap:mail}
      }
    }
    userdb ldap {
      driver = ldap
      use_worker = yes

      ldap_connection_group = userdb
      filter = (&(objectClass=user)(mail=%{user})(memberOf=cn=dovecot,ou=groups,dc=ldap,dc=goauthentik,dc=io)(ak-active=true))
      fields {
        home = /var/vmail/%{user|domain}/%{user|username}
      }

      # For using doveadm -A:
      iterate_filter = (&(objectClass=user)(memberOf=cn=dovecot,ou=groups,dc=ldap,dc=goauthentik,dc=io)(ak-active=true))
      ldap_iterate_fields {
        user = %{ldap:mail}
      }
    }
  10-mail.conf: |
    mail_driver = maildir
    mail_path = /var/vmail/%{user|domain}/%{user|username}
    mail_uid = vmail
    mail_gid = vmail
    mail_privileged_group = vmail
    namespace inbox {
      inbox = yes
      # See 15-mailboxes.conf for definitions of special mailboxes.
    }
  10-nfs.conf: |
    # https://doc.dovecot.org/main/core/config/nfs.html
    mail_nfs_index = no
    mail_nfs_storage = no
    mail_fsync = always
    mmap_disable = yes
  15-mailboxes.conf: |
    # NOTE: Assumes "namespace inbox" has been defined in 10-mail.conf.
    namespace inbox {
      inbox = yes

      mailbox Archive {
        auto = subscribe
        special_use = \Archive
      }
      mailbox Drafts {
        auto = subscribe
        special_use = \Drafts
      }
      mailbox Spam {
        auto = subscribe
        special_use = \Junk
      }
      mailbox Trash {
        auto = subscribe
        special_use = \Trash
      }
      mailbox Sent {
        auto = subscribe
        special_use = \Sent
      }
    }
  40-logging.conf: |
    # TODO use 2.4.0 syntax if we need this in the future
    # https://doc.dovecot.org/main/core/config/events/filter.html#global-filter-syntax
    #auth_verbose = no
    #auth_verbose_passwords = no
    #auth_debug = no
    #auth_debug_passwords = no
    #mail_debug = no
    #verbose_ssl = no
  50-health.conf: |
    service health-check {
      executable = script -p /opt/dovecot/bin/health-check.sh
      inet_listener health-check {
          port = 5001
      }
    }
  60-monitoring.conf: |
    service stats {
      inet_listener http {
        port = 9900
      }
    }

    metric auth_success {
      filter = (event=auth_request_finished AND success=yes)
    }

    
    metric auth_failures {
      filter = (event=auth_request_finished AND NOT success=yes)
    }

    metric imap_command {
      filter = event=imap_command_finished
      group_by cmd_name {
      }
      group_by tagged_reply_state {
      }
    }

    metric smtp_command {
      filter = event=smtp_server_command_finished
      group_by cmd_name {
      }
      group_by status_code {
      }
      group_by duration {
        method exponential {
          min_magnitude = 1
          max_magnitude = 5
        }
      }
    }

    metric mail_delivery {
      filter = event=mail_delivery_finished
      group_by duration {
        method exponential {
          min_magnitude = 1
          max_magnitude = 5
        }
      }
    }
