apiVersion: v1
kind: Secret
metadata:
  name: authentik-blueprint-immich
  namespace: auth
type: Opaque
stringData:
  immich.yaml: |
    # yaml-language-server: $schema=https://goauthentik.io/blueprints/schema.json
    version: 1
    metadata:
      name: Custom - Immich
    entries:
      - model: authentik_blueprints.metaapplyblueprint
        attrs:
          identifiers: { name: Custom - Common Functionality }
          required: true

      - model: authentik_providers_oauth2.oauth2provider
        id: immich
        identifiers: { name: immich }
        state: present
        attrs:
          authentication_flow: !Find [authentik_flows.flow, [slug, default-authentication-flow]]
          authorization_flow: !Find [authentik_flows.flow, [slug, default-provider-authorization-explicit-consent]]
          invalidation_flow: !Find [authentik_flows.flow, [slug, default-provider-invalidation-flow]]
          client_type: confidential
          client_id: ${secrets_apps_auth_applications_immich_clientId}
          client_secret: ${secrets_apps_auth_applications_immich_clientSecret}
          redirect_uris:
            - { matching_mode: strict, url: https://photos.${vals_info_cluster_domain}/auth/login }
            - { matching_mode: strict, url: https://photos.${vals_info_cluster_domain}/user-settings }
            - { matching_mode: strict, url: app.immich:///oauth-callback }
          access_code_validity: minutes=1
          access_token_validity: minutes=30
          refresh_token_validity: days=30
          signing_key: !Find [authentik_crypto.CertificateKeyPair, [name, auth.${vals_info_cluster_domain}]]
          property_mappings:
            - !Find [authentik_providers_oauth2.ScopeMapping, [scope_name, email]]
            - !Find [authentik_providers_oauth2.ScopeMapping, [scope_name, openid]]
            - !Find [authentik_providers_oauth2.ScopeMapping, [scope_name, profile]]
            - !Find [authentik_providers_oauth2.ScopeMapping, [scope_name, offline_access]]

      - model: authentik_core.application
        id: immich
        identifiers: { slug: immich }
        state: present
        attrs:
          name: Immich
          slug: immich
          provider: !KeyOf immich
          meta_launch_url: https://photos.${vals_info_cluster_domain}/
          icon: /icons/immich.svg
          policy_engine_mode: any

      - model: authentik_core.group
        id: immich
        identifiers: { name: immich }
        state: present
        attrs: { name: immich }

      # Application entitlements (group access)
      - model: authentik_policies.PolicyBinding
        identifiers:
          target: !KeyOf immich          # application
          group:  !KeyOf immich          # group
        attrs:
          order: 10
      - model: authentik_policies.PolicyBinding
        identifiers:
          target: !KeyOf immich
          group: !Find [authentik_core.group, [name, authentik Admins]]
        attrs:
          order: 20

      # Service account for sending email (SMTP)
      - model: authentik_core.user
        identifiers: { username: svc-immich-sender }
        state: present
        attrs:
          name: svc-immich-sender
          email: immich@${vals_info_cluster_domain}
          is_active: true
          groups:
            - !Find [authentik_core.group, [name, smtp-senders]]
          attributes:
            goauthentik.io/user/service-account: true
      - model: authentik_core.token
        identifiers: { identifier: svc-immich-smtp-password }
        state: present
        attrs:
          user: !Find [authentik_core.user, [username, svc-immich-sender]]
          intent: app_password
          key: ${secrets_apps_photos_immich_smtp_password}
          expiring: false
